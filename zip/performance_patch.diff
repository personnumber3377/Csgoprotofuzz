diff --git a/protofuzz/values.py b/protofuzz/values.py
index b3e0c86..c3dae99 100644
--- a/protofuzz/values.py
+++ b/protofuzz/values.py
@@ -75,39 +75,54 @@ def _limit_helper(stream: Union[BinaryIO, Generator, List], limit: int) -> Gener
         else:
             limit = limit - 1  # FIXME
 
+integers = []
 
 def _fuzzdb_integers(limit: int = 0) -> Generator:
     """Return integers from fuzzdb."""
-    path = _get_fuzzdb_path() / Path("integer-overflow/integer-overflows.txt")
-    with open(path, "rb") as stream:
-        for line in _limit_helper(stream, limit):
-            yield int(line.decode("utf-8"), 0)
+    if integers == []:
+
+        path = _get_fuzzdb_path() / Path("integer-overflow/integer-overflows.txt")
+        with open(path, "rb") as stream:
+            for line in _limit_helper(stream, limit):
+                integer = int(line.decode("utf-8"), 0)
+                integers.append(integer)
+                yield integer
+    else:
+        for integer in integers:
+            yield integer
+
 
+strings = []
 
 def _fuzzdb_get_strings(max_len: int = 0) -> Generator:
     """Return strings from fuzzdb."""
-    ignored = ["integer-overflow"]
-    for subdir in os.listdir(_get_fuzzdb_path()):
-        if subdir in ignored:
-            continue
-        subdir_abs_path = _get_fuzzdb_path() / Path(subdir)
-        try:
-            listing = os.listdir(subdir_abs_path)
-        except NotADirectoryError:
-            continue
-        for filename in listing:
-            if not filename.endswith(".txt"):
+
+    if strings == []:
+        ignored = ["integer-overflow"]
+        for subdir in os.listdir(_get_fuzzdb_path()):
+            if subdir in ignored:
                 continue
-            subdir_abs_path_filename = subdir_abs_path / Path(filename)
-            with open(subdir_abs_path_filename, "rb") as source:
-                for line in source:
-                    string = line.decode("utf-8").strip()
-                    if not string or string.startswith("#"):
-                        continue
-                    if max_len != 0 and len(line) > max_len:
-                        continue
-
-                    yield string
+            subdir_abs_path = _get_fuzzdb_path() / Path(subdir)
+            try:
+                listing = os.listdir(subdir_abs_path)
+            except NotADirectoryError:
+                continue
+            for filename in listing:
+                if not filename.endswith(".txt"):
+                    continue
+                subdir_abs_path_filename = subdir_abs_path / Path(filename)
+                with open(subdir_abs_path_filename, "rb") as source:
+                    for line in source:
+                        string = line.decode("utf-8").strip()
+                        if not string or string.startswith("#"):
+                            continue
+                        if max_len != 0 and len(line) > max_len:
+                            continue
+                        strings.append(string)
+                        yield string
+    else:
+        for string in strings:
+            yield string
 
 
 def get_strings(max_len: int = 0, limit: int = 0) -> Generator:
